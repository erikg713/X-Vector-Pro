# core/exploits/exploit_recon.py

import json
import os

class ExploitRecon:
    def __init__(self, recon_data_path="reports/last_recon.json", cve_db_path="cve_db.json"):
        self.recon_data_path = recon_data_path
        self.cve_db_path = cve_db_path
        self.recon_data = self.load_json(self.recon_data_path)
        self.cve_db = self.load_json(self.cve_db_path)

    def load_json(self, path):
        if os.path.exists(path):
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}

    def find_exploitable_services(self):
        exploitable = []

        services = self.recon_data.get("services", [])
        for svc in services:
            name = svc.get("name", "").lower()
            version = svc.get("version", "").lower()

            for cve_id, cve_data in self.cve_db.items():
                if name in cve_data.get("product", "").lower():
                    if version and version in cve_data.get("version", "").lower():
                        exploitable.append({
                            "cve_id": cve_id,
                            "product": name,
                            "version": version,
                            "description": cve_data.get("description", ""),
                            "cvss": cve_data.get("cvss", "N/A")
                        })

        return exploitable

    def run(self):
        results = self.find_exploitable_services()
        if not results:
            return {"status": "no_exploits_found", "count": 0}

        result_path = "reports/exploit_suggestions.json"
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2)

        return {"status": "exploits_found", "count": len(results), "output": result_path}
