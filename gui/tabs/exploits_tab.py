import customtkinter as ctk 
from core.exploits import CVE_2024_10960_brizy_rce, admin_ajax_privesc

class ExploitsTab(ctk.CTkFrame): def init(self, master): super().init(master) self.configure(padx=20, pady=20) self.create_widgets()

def create_widgets(self):
    # Title
    self.title_label = ctk.CTkLabel(self, text="Exploits Module", font=("Arial", 20, "bold"))
    self.title_label.pack(pady=(0, 20))

    # Target URL input
    self.target_entry = ctk.CTkEntry(self, width=400, placeholder_text="Enter target URL (e.g., http://example.com)")
    self.target_entry.pack(pady=(0, 10))

    # Exploit dropdown
    self.exploit_dropdown = ctk.CTkComboBox(
        self,
        width=400,
        values=[
            "CVE-2024-10960 – Brizy RCE",
            "Admin-Ajax.php Privilege Escalation"
        ],
        command=self.set_selected_exploit
    )
    self.exploit_dropdown.pack(pady=(0, 10))

    # Run button
    self.run_button = ctk.CTkButton(self, text="Run Exploit", command=self.run_selected_exploit)
    self.run_button.pack(pady=(10, 20))

    # Status label
    self.status_label = ctk.CTkLabel(self, text="", text_color="white")
    self.status_label.pack()

    # Mapping exploit labels to functions
    self.exploit_map = {
        "CVE-2024-10960 – Brizy RCE": CVE_2024_10960_brizy_rce.run_exploit,
        "Admin-Ajax.php Privilege Escalation": admin_ajax_privesc.run_exploit
    }

def set_selected_exploit(self, selected):
    self.selected_exploit = selected

def run_selected_exploit(self):
    target_url = self.target_entry.get()
    selected = self.exploit_dropdown.get()
    if selected in self.exploit_map:
        try:
            result = self.exploit_map[selected](target_url)
            if result:
                self.update_status("[+] Exploit executed successfully.", "green")
            else:
                self.update_status("[-] Exploit failed or not vulnerable.", "red")
        except Exception as e:
            self.update_status(f"[!] Error: {e}", "orange")
    else:
        self.update_status("[!] No exploit selected.", "orange")

def update_status(self, message, color):
    self.status_label.configure(text=message, text_color=color)

import customtkinter as ctk
import os
import importlib.util
from tkinter import messagebox

EXPLOIT_DIR = "exploits"

def load_exploit_modules():
    modules = []
    if not os.path.exists(EXPLOIT_DIR):
        return []

    for file in os.listdir(EXPLOIT_DIR):
        if file.endswith(".py") and not file.startswith("__"):
            path = os.path.join(EXPLOIT_DIR, file)
            spec = importlib.util.spec_from_file_location(file[:-3], path)
            module = importlib.util.module_from_spec(spec)
            try:
                spec.loader.exec_module(module)
                if hasattr(module, "run"):
                    modules.append((file[:-3], module))
            except Exception as e:
                print(f"Error loading {file}: {e}")
    return modules

def build_tab(parent):
    frame = ctk.CTkFrame(parent)
    ctk.CTkLabel(frame, text="Exploits Launcher", font=("Arial", 18)).pack(pady=10)

    exploit_var = ctk.StringVar()
    output_box = ctk.CTkTextbox(frame, height=300, wrap="word")
    output_box.pack(pady=10, fill="both", expand=True)

    # Dropdown
    modules = load_exploit_modules()
    options = [m[0] for m in modules]
    if options:
        exploit_var.set(options[0])

    dropdown = ctk.CTkOptionMenu(frame, values=options, variable=exploit_var)
    dropdown.pack(pady=5)

    def run_selected_exploit():
        selected_name = exploit_var.get()
        for name, mod in modules:
            if name == selected_name:
                try:
                    output_box.insert("end", f"\n[*] Running: {name}\n")
                    result = mod.run()
                    output_box.insert("end", f"{result}\n")
                except Exception as e:
                    output_box.insert("end", f"[!] Error: {e}\n")
                return
        messagebox.showerror("Error", "Exploit module not found.")

    run_button = ctk.CTkButton(frame, text="Run Exploit", command=run_selected_exploit)
    run_button.pack(pady=10)

    return frame
