import customtkinter as ctk 
from core.exploits import CVE_2024_10960_brizy_rce, admin_ajax_privesc

class ExploitsTab(ctk.CTkFrame): def init(self, master): super().init(master) self.configure(padx=20, pady=20) self.create_widgets()

def create_widgets(self):
    # Title
    self.title_label = ctk.CTkLabel(self, text="Exploits Module", font=("Arial", 20, "bold"))
    self.title_label.pack(pady=(0, 20))

    # Target URL input
    self.target_entry = ctk.CTkEntry(self, width=400, placeholder_text="Enter target URL (e.g., http://example.com)")
    self.target_entry.pack(pady=(0, 10))

    # Exploit dropdown
    self.exploit_dropdown = ctk.CTkComboBox(
        self,
        width=400,
        values=[
            "CVE-2024-10960 – Brizy RCE",
            "Admin-Ajax.php Privilege Escalation"
        ],
        command=self.set_selected_exploit
    )
    self.exploit_dropdown.pack(pady=(0, 10))

    # Run button
    self.run_button = ctk.CTkButton(self, text="Run Exploit", command=self.run_selected_exploit)
    self.run_button.pack(pady=(10, 20))

    # Status label
    self.status_label = ctk.CTkLabel(self, text="", text_color="white")
    self.status_label.pack()

    # Mapping exploit labels to functions
    self.exploit_map = {
        "CVE-2024-10960 – Brizy RCE": CVE_2024_10960_brizy_rce.run_exploit,
        "Admin-Ajax.php Privilege Escalation": admin_ajax_privesc.run_exploit
    }

def set_selected_exploit(self, selected):
    self.selected_exploit = selected

def run_selected_exploit(self):
    target_url = self.target_entry.get()
    selected = self.exploit_dropdown.get()
    if selected in self.exploit_map:
        try:
            result = self.exploit_map[selected](target_url)
            if result:
                self.update_status("[+] Exploit executed successfully.", "green")
            else:
                self.update_status("[-] Exploit failed or not vulnerable.", "red")
        except Exception as e:
            self.update_status(f"[!] Error: {e}", "orange")
    else:
        self.update_status("[!] No exploit selected.", "orange")

def update_status(self, message, color):
    self.status_label.configure(text=message, text_color=color)

