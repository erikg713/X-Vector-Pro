import os
import json
import random
import socket
import threading
import time
from tkinter import ttk
import customtkinter as ctk

from core.exploits import exploit_manager
from core.exploit_runner import run_exploit
from utils.logger import log
from gui.dashboard import show_toast

LOG_DIR = "logs"

class ExploitsTab(ctk.CTkFrame):
    def __init__(self, master):
        super().__init__(master)
        self.status_var = ctk.StringVar(value="Idle")
        self.stealth_var = ctk.BooleanVar(value=False)
        self.use_tor_var = ctk.BooleanVar(value=False)
        self.use_proxy_var = ctk.BooleanVar(value=False)
        self.rotate_every_request_var = ctk.BooleanVar(value=False)
        self.build_ui()

    def build_ui(self):
        ctk.CTkLabel(self, text="Exploit Launcher", font=("Segoe UI", 20, "bold")).pack(pady=(10, 5))

        # Exploit dropdown
        self.exploit_dropdown = ctk.CTkComboBox(self, width=700, values=self.get_available_exploits())
        self.exploit_dropdown.pack(pady=5)

        self.target_entry = ctk.CTkEntry(self, width=700, placeholder_text="Target IP or Domain")
        self.target_entry.pack(pady=5)

        # Cloaking Options
        options_frame = ctk.CTkFrame(self)
        options_frame.pack(pady=10)
        ctk.CTkCheckBox(options_frame, text="Stealth Mode", variable=self.stealth_var).pack(side="left", padx=10)
        ctk.CTkCheckBox(options_frame, text="Use Tor", variable=self.use_tor_var).pack(side="left", padx=10)
        ctk.CTkCheckBox(options_frame, text="Rotate Proxies", variable=self.use_proxy_var).pack(side="left", padx=10)
        ctk.CTkCheckBox(options_frame, text="Proxy per Request", variable=self.rotate_every_request_var).pack(side="left", padx=10)

        # Start button
        self.start_button = ctk.CTkButton(self, text="Run Exploit", command=self.start_exploit_threaded)
        self.start_button.pack(pady=10)

        # Status and Spinner
        ctk.CTkLabel(self, textvariable=self.status_var, text_color="gray").pack()
        self.spinner = ttk.Progressbar(self, mode="indeterminate", length=200)
        self.spinner.place_forget()

        # Output box
        self.output_box = ctk.CTkTextbox(self, height=350, width=850)
        self.output_box.pack(padx=10, pady=10)
        self.output_box.insert("end", "Output will appear here...\n")
        self.output_box.configure(state="disabled")

    def get_available_exploits(self):
        try:
            exploits = []
            exploits_dir = "core/exploits"
            for file in os.listdir(exploits_dir):
                if file.startswith("exploit_") and file.endswith(".py"):
                    exploits.append(file.replace(".py", ""))
            return sorted(exploits)
        except Exception as e:
            log.error(f"Failed to load exploits: {e}")
            return []

    def start_exploit_threaded(self):
        threading.Thread(target=self.run_exploit, daemon=True).start()

    def run_exploit(self):
        self.set_button_state(False)
        self.show_status("Running exploit...")
        self.show_spinner(True)
        self.clear_output()

        exploit_id = self.exploit_dropdown.get().strip()
        target = self.target_entry.get().strip()

        if not exploit_id or not target:
            self.append_output("[ERROR] Exploit ID and Target are required.", "red")
            self.show_status("Idle")
            self.set_button_state(True)
            self.show_spinner(False)
            return

        try:
            self.apply_network_cloaking()

            result = run_exploit(exploit_id, target)

            if self.stealth_var.get():
                self.encrypt_logs(exploit_id, result)
                self.append_output("[SUCCESS] Exploit executed (result encrypted).", "green")
            else:
                self.append_output(result, "normal")

            self.animate_toast("Exploit finished.", "success")
        except Exception as e:
            self.append_output(f"[ERROR] {e}", "red")
            self.animate_toast(f"Exploit error: {e}", "error")
        finally:
            self.show_status("Idle")
            self.set_button_state(True)
            self.show_spinner(False)

    def apply_network_cloaking(self):
        if self.use_tor_var.get():
            if self.check_tor_running():
                try:
                    import socks
                    socks.set_default_proxy(socks.SOCKS5, "127.0.0.1", 9050)
                    socket.socket = socks.socksocket
                    log.info("Tor routing applied.")
                except Exception as e:
                    log.error(f"Tor setup failed: {e}")
                    self.animate_toast("Tor setup failed.", "error")
            else:
                self.animate_toast("Tor not running on port 9050.", "error")

        if self.use_proxy_var.get():
            try:
                with open("proxies.txt") as f:
                    proxies = [p.strip() for p in f if p.strip()]
                if not proxies:
                    raise ValueError("Proxy list is empty.")

                proxy = random.choice(proxies)
                os.environ["HTTP_PROXY"] = proxy
                os.environ["HTTPS_PROXY"] = proxy
                log.info(f"Proxy rotated: {proxy}")
            except Exception as e:
                log.error(f"Proxy rotation failed: {e}")
                self.animate_toast("Proxy rotation failed.", "error")

    def check_tor_running(self):
        try:
            sock = socket.create_connection(("127.0.0.1", 9050), timeout=2)
            sock.close()
            return True
        except:
            return False

    def encrypt_logs(self, exploit_id, result):
        try:
            from utils.logger import encrypt_log
            payload = json.dumps({"exploit": exploit_id, "result": result})
            encrypt_log(payload, f"{exploit_id}_result.enc")
            log.info(f"Encrypted log saved: {exploit_id}_result.enc")
        except Exception as e:
            log.error(f"Encryption failed: {e}")
            self.animate_toast("Log encryption failed.", "error")

    def append_output(self, text, mode="normal"):
        self.output_box.configure(state="normal")
        if mode == "red":
            self.output_box.insert("end", text + "\n", ("error",))
        elif mode == "green":
            self.output_box.insert("end", text + "\n", ("success",))
        else:
            self.output_box.insert("end", text + "\n")
        self.output_box.see("end")
        self.output_box.configure(state="disabled")

        # Tag colors
        self.output_box.tag_config("error", foreground="red")
        self.output_box.tag_config("success", foreground="lime")

    def clear_output(self):
        self.output_box.configure(state="normal")
        self.output_box.delete("1.0", "end")
        self.output_box.configure(state="disabled")

    def show_status(self, text):
        self.status_var.set(text)

    def set_button_state(self, enabled):
        self.start_button.configure(state="normal" if enabled else "disabled")

    def show_spinner(self, show):
        if show:
            self.spinner.place(relx=0.5, rely=1.0, anchor="center", y=-50)
            self.spinner.start()
        else:
            self.spinner.place_forget()
            self.spinner.stop()

    def animate_toast(self, message, type_="info"):
        show_toast(self.master, message, type_)
self.exploit_dropdown = ctk.CTkComboBox(
    self,
    values=[
        "CVE-2024-10960 â€“ Brizy RCE",
        "Admin-Ajax.php Privilege Escalation"
    ],
    command=self.set_selected_exploit
)
