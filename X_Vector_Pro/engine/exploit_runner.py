import importlib
import os
import time
from utils.logger import log_to_central

EXPLOIT_PATH = "exploits"  # Directory where exploits are stored

def list_exploits():
    """Returns a list of available exploit module names."""
    exploits = []
    for file in os.listdir(EXPLOIT_PATH):
        if file.endswith(".py") and not file.startswith("__"):
            exploits.append(file[:-3])
    return exploits

def run_exploit(exploit_id: str, target: str) -> str:
    """
    Dynamically loads and runs an exploit module by ID.

    Args:
        exploit_id (str): The exploit module name (without .py).
        target (str): The target host/IP.

    Returns:
        str: Output or result from the exploit.
    """
    log_to_central(f"[*] Attempting to run exploit: {exploit_id} on {target}")
    time.sleep(0.5)  # Simulate load delay

    try:
        if exploit_id.lower() == "exploit_fail":
            raise RuntimeError("Forced test failure.")

        if exploit_id.lower() == "exploit_01":
            # Built-in dummy exploit
            time.sleep(1.5)
            result = f"✅ Exploit '{exploit_id}' successfully executed on {target}."
            log_to_central(result)
            return result

        # Try to dynamically import exploit from exploits/ directory
        module_path = f"{EXPLOIT_PATH}.{exploit_id}"
        exploit_module = importlib.import_module(module_path)
        if hasattr(exploit_module, "run"):
            result = exploit_module.run(target)
            log_to_central(f"[+] {result}")
            return result
        else:
            msg = f"❌ Exploit module '{exploit_id}' has no 'run' function."
            log_to_central(msg)
            return msg

    except Exception as e:
        error_msg = f"❌ Error running exploit '{exploit_id}': {e}"
        log_to_central(error_msg)
        return error_msg
