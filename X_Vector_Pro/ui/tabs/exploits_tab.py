import os
import threading
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

from core.exploits import run_exploit
from utils.file_loader import load_cve_map
from utils.toast import Toast

EXPLOIT_DIR = "core/exploits/"
CVE_MAP_PATH = "cve_db.json"

class ExploitsTab:
    def __init__(self, parent, toast_manager, result_tracker):
        self.toast = toast_manager
        self.result_tracker = result_tracker

        self.frame = ttk.Frame(parent)
        self.exploit_var = tk.StringVar()
        self.cve_map = load_cve_map(CVE_MAP_PATH)

        self._build_ui()

    def _build_ui(self):
        ttk.Label(self.frame, text="Available Exploits", font=("Segoe UI", 14, "bold")).pack(pady=10)

        self.exploit_dropdown = ttk.Combobox(self.frame, textvariable=self.exploit_var, width=40)
        self.exploit_dropdown['values'] = self._get_exploit_list()
        self.exploit_dropdown.pack(pady=5)

        button_frame = ttk.Frame(self.frame)
        button_frame.pack(pady=8)

        ttk.Button(button_frame, text="Run Selected Exploit", command=self._run_selected).pack(side="left", padx=6)
        ttk.Button(button_frame, text="Run All CVE Exploits", command=self._run_bulk).pack(side="left", padx=6)

        self.log_box = tk.Text(self.frame, height=16, width=90, bg="#1e1e1e", fg="#dcdcdc", insertbackground="#dcdcdc")
        self.log_box.pack(pady=10)

    def _get_exploit_list(self):
        files = [f for f in os.listdir(EXPLOIT_DIR) if f.startswith("exploit_") and f.endswith(".py")]
        return sorted([f[:-3] for f in files])  # remove .py

    def _log(self, msg):
        self.log_box.insert(tk.END, f"{msg}\n")
        self.log_box.see(tk.END)

    def _run_selected(self):
        exploit = self.exploit_var.get()
        if not exploit:
            self.toast.show("Select an exploit first.")
            return
        threading.Thread(target=self._execute_exploit, args=(exploit,), daemon=True).start()

    def _run_bulk(self):
        targets = self.result_tracker.get_detected_cves()
        if not targets:
            self.toast.show("No CVEs detected in scan results.")
            return

        exploits_to_run = set()
        for cve in targets:
            exploits_to_run.update(self.cve_map.get(cve, []))

        if not exploits_to_run:
            self.toast.show("No mapped exploits found for detected CVEs.")
            return

        for exploit in sorted(exploits_to_run):
            threading.Thread(target=self._execute_exploit, args=(exploit,), daemon=True).start()

    def _execute_exploit(self, exploit_name):
        self._log(f"[*] Running exploit: {exploit_name}")
        try:
            output = run_exploit(exploit_name)
            self._log(f"[+] Success: {output}")
        except Exception as e:
            self._log(f"[-] Failed: {exploit_name} â€” {e}")

import customtkinter as ctk
import importlib.util, os, threading
from tkinter import messagebox
from utils.logger import log_to_central

EXPLOIT_DIR = "exploits"

def load_exploits_tab(tab):
    ctk.CTkLabel(tab, text="Target IP or Domain").pack(pady=5)
    target_entry = ctk.CTkEntry(tab, width=500)
    target_entry.pack(pady=5)

    output_box = ctk.CTkTextbox(tab, width=800, height=400)
    output_box.pack(pady=10)

    exploit_modules = {}

    def discover_exploits():
        output_box.insert("end", "[*] Scanning exploit directory...\n")
        for file in os.listdir(EXPLOIT_DIR):
            if file.endswith(".py") and not file.startswith("__"):
                name = file.replace(".py", "")
                path = os.path.join(EXPLOIT_DIR, file)
                spec = importlib.util.spec_from_file_location(name, path)
                module = importlib.util.module_from_spec(spec)
                try:
                    spec.loader.exec_module(module)
                    if hasattr(module, "run"):
                        exploit_modules[name] = module
                        output_box.insert("end", f"[+] Loaded {name}\n")
                except Exception as e:
                    output_box.insert("end", f"[-] Failed to load {name}: {e}\n")

    def run_exploit(name):
        target = target_entry.get().strip()
        if not target:
            messagebox.showerror("Missing Target", "Please enter a target IP or domain.")
            return
        try:
            output_box.insert("end", f"[*] Running {name}...\n")
            result = exploit_modules[name].run(target)
            output_box.insert("end", f"{result}\n")
            log_to_central(f"[+] {name} executed on {target}")
        except Exception as e:
            output_box.insert("end", f"[-] {name} failed: {e}\n")

    def run_all_exploits():
        for name in exploit_modules:
            threading.Thread(target=run_exploit, args=(name,), daemon=True).start()

    # Discover and list exploits
    discover_exploits()

    for name in exploit_modules:
        ctk.CTkButton(tab, text=f"Run {name}", command=lambda n=name: threading.Thread(target=run_exploit, args=(n,), daemon=True).start()).pack(pady=2)

    ctk.CTkButton(tab, text="Run All Exploits", command=lambda: threading.Thread(target=run_all_exploits, daemon=True).start(), fg_color="green").pack(pady=10)
