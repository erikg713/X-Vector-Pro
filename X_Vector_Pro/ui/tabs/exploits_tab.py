# ui/tabs/exploits_tab.py

import os
import threading
import importlib.util
import customtkinter as ctk
from tkinter import messagebox
from utils.logger import log_to_central

EXPLOIT_DIR = "core/exploits"

class ExploitsTab:
    def __init__(self, parent):
        self.parent = parent
        self.exploit_modules = {}

        self._setup_ui()
        self._load_exploit_modules()

    def _setup_ui(self):
        # Target input
        ctk.CTkLabel(self.parent, text="Target IP or Domain", font=("Segoe UI", 14)).pack(pady=(10, 4))
        self.target_entry = ctk.CTkEntry(self.parent, width=500)
        self.target_entry.pack(pady=(0, 10))

        # Output console
        self.output_console = ctk.CTkTextbox(self.parent, width=900, height=420, font=("Consolas", 12))
        self.output_console.pack(pady=10)
        self._log("[*] Exploits tab loaded.\n")

        # Buttons frame
        self.button_frame = ctk.CTkFrame(self.parent)
        self.button_frame.pack(pady=(10, 5))

        # Run All button
        ctk.CTkButton(
            self.parent,
            text="Run All Exploits",
            fg_color="#1f6feb",
            hover_color="#1953c5",
            command=self._run_all_exploits,
            width=180
        ).pack(pady=(5, 10))

    def _log(self, message):
        self.output_console.insert("end", f"{message}\n")
        self.output_console.see("end")

    def _load_exploit_modules(self):
        self._log("[*] Discovering exploit modules...\n")

        for file in sorted(os.listdir(EXPLOIT_DIR)):
            if file.startswith("exploit_") and file.endswith(".py"):
                module_name = file[:-3]
                file_path = os.path.join(EXPLOIT_DIR, file)

                try:
                    spec = importlib.util.spec_from_file_location(module_name, file_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)

                    if hasattr(module, "run"):
                        self.exploit_modules[module_name] = module
                        self._add_exploit_button(module_name)
                        self._log(f"[+] Loaded: {module_name}")
                    else:
                        self._log(f"[-] Skipped (no run()): {module_name}")
                except Exception as e:
                    self._log(f"[!] Error loading {module_name}: {e}")

        if not self.exploit_modules:
            self._log("[!] No valid exploits found.")

    def _add_exploit_button(self, name):
        btn = ctk.CTkButton(
            self.button_frame,
            text=f"Run {name}",
            command=lambda: threading.Thread(target=self._run_exploit, args=(name,), daemon=True).start(),
            width=240
        )
        btn.pack(pady=2)

    def _run_exploit(self, name):
        target = self.target_entry.get().strip()
        if not target:
            messagebox.showwarning("Target Missing", "Please enter a target IP or domain.")
            return

        self._log(f"\n[*] Running {name} against {target}...")

        try:
            result = self.exploit_modules[name].run(target)
            log_to_central(f"[+] {name} executed on {target}")
            self._log(f"[+] {name} result:\n{result}")
        except Exception as e:
            self._log(f"[-] {name} failed: {e}")

    def _run_all_exploits(self):
        for name in self.exploit_modules:
            threading.Thread(target=self._run_exploit, args=(name,), daemon=True).start()
