# ui/tabs_exploits.py

import customtkinter as ctk
import importlib.util, os, threading
from tkinter import messagebox
from utils.logger import log_to_central

EXPLOIT_DIR = "exploits"

def load_exploits_tab(tab):
    ctk.CTkLabel(tab, text="Target IP or Domain").pack(pady=5)
    target_entry = ctk.CTkEntry(tab, width=500)
    target_entry.pack(pady=5)

    output_box = ctk.CTkTextbox(tab, width=800, height=400)
    output_box.pack(pady=10)

    exploit_modules = {}

    def discover_exploits():
        output_box.insert("end", "[*] Scanning exploit directory...\n")
        for file in os.listdir(EXPLOIT_DIR):
            if file.endswith(".py") and not file.startswith("__"):
                name = file.replace(".py", "")
                path = os.path.join(EXPLOIT_DIR, file)
                spec = importlib.util.spec_from_file_location(name, path)
                module = importlib.util.module_from_spec(spec)
                try:
                    spec.loader.exec_module(module)
                    if hasattr(module, "run"):
                        exploit_modules[name] = module
                        output_box.insert("end", f"[+] Loaded {name}\n")
                except Exception as e:
                    output_box.insert("end", f"[-] Failed to load {name}: {e}\n")

    def run_exploit(name):
        target = target_entry.get().strip()
        if not target:
            messagebox.showerror("Missing Target", "Please enter a target IP or domain.")
            return
        try:
            output_box.insert("end", f"[*] Running {name}...\n")
            result = exploit_modules[name].run(target)
            output_box.insert("end", f"{result}\n")
            log_to_central(f"[+] {name} executed on {target}")
        except Exception as e:
            output_box.insert("end", f"[-] {name} failed: {e}\n")

    def run_all_exploits():
        for name in exploit_modules:
            threading.Thread(target=run_exploit, args=(name,), daemon=True).start()

    # Discover and list exploits
    discover_exploits()

    for name in exploit_modules:
        ctk.CTkButton(tab, text=f"Run {name}", command=lambda n=name: threading.Thread(target=run_exploit, args=(n,), daemon=True).start()).pack(pady=2)

    ctk.CTkButton(tab, text="Run All Exploits", command=lambda: threading.Thread(target=run_all_exploits, daemon=True).start(), fg_color="green").pack(pady=10)
